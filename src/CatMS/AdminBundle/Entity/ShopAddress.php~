<?php
namespace CatMS\AdminBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints\True;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * @ORM\Table(name="shop_address")
 * @ORM\Entity(repositoryClass="CatMS\AdminBundle\Repository\ShopAddressRepository")
 * @UniqueEntity("slug")
 * @ORM\HasLifecycleCallbacks
 */
class ShopAddress
{
    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @var integer
     */
    private $id;
    
    /**
     * @ORM\Column(type="string", length=255, unique=true)
     * @Gedmo\Slug(fields={"name"})
     * @Assert\Length(
     *      min=4,
     *      minMessage="Shop address slug must have at least {{ limit }} characters.",
     *      max=255,
     *      maxMessage="Shop address slug must have no more than {{ limit }} characters."
     * )
     * @var string
     */
    private $slug;
    
    /**
     * @ORM\Column(type="string", length=255)
     */
    private $urlAddress;
    
    /**
     * @ORM\Column(type="string", length=255, unique=true)
     * @Assert\NotBlank()
     * @Assert\Length(
     *      min=4,
     *      minMessage="Shop address name must have at least {{ limit }} characters.",
     *      max=255,
     *      maxMessage="Shop address name must have no more than {{ limit }} characters."
     * )
     * @var string
     */
    private $name;  
    
    /**
     * @ORM\ManyToOne(targetEntity="\CatMS\AdminBundle\Entity\Province", inversedBy="shops")
     * @ORM\JoinColumn(name="province_id", referencedColumnName="id", onDelete="SET NULL")
     * 
     * @var ovject CatMS/AdminBundle/Entity/Province 
     */
    private $province;
    
    /**
     * @ORM\Column(type="string", length=510)
     * @Assert\NotBlank()
     * @Assert\Length(
     *      min=4,
     *      minMessage="Address name must have at least {{ limit }} characters.",
     *      max=510,
     *      maxMessage="Address name must have no more than {{ limit }} characters."
     * )
     * @var string
     */
    private $address;
    
    /**
     * @ORM\Column(type="string", length=50)
     * @Assert\Choice(choices = {"shop", "pharmacy"}, message = "Choose a valid type.")
     * @var string
     */
    private $type;
    
    /**
     * @ORM\Column(type="integer")
     * @var int 
     */
    private $priority = 99;
    
    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     * @Assert\Length(
     *      min=4,
     *      minMessage="Website address name must have at least {{ limit }} characters.",
     *      max=510,
     *      maxMessage="Website address name must have no more than {{ limit }} characters."
     * )
     * @var string
     */
    private $website;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean 
     */
    private $stationary;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean 
     */
    private $distinction;
    
    /**
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(type="datetime", name="updated_at")
     * @var datetime
     */
    private $updatedAt;
    

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set slug
     *
     * @param string $slug
     * @return ShopAddress
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string 
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return ShopAddress
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set address
     *
     * @param string $address
     * @return ShopAddress
     */
    public function setAddress($address)
    {
        $this->address = $address;

        return $this;
    }

    /**
     * Get address
     *
     * @return string 
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set website
     *
     * @param string $website
     * @return ShopAddress
     */
    public function setWebsite($website)
    {
        $this->website = $website;

        return $this;
    }

    /**
     * Get website
     *
     * @return string 
     */
    public function getWebsite()
    {
        return $this->website;
    }

    /**
     * Set distinction
     *
     * @param boolean $distinction
     * @return ShopAddress
     */
    public function setDistinction($distinction)
    {
        $this->distinction = $distinction;

        return $this;
    }

    /**
     * Get distinction
     *
     * @return boolean 
     */
    public function getDistinction()
    {
        return $this->distinction;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     * @return ShopAddress
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime 
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Set province
     *
     * @param \CatMS\AdminBundle\Entity\Province $province
     * @return ShopAddress
     */
    public function setProvince(\CatMS\AdminBundle\Entity\Province $province = null)
    {
        $this->province = $province;

        return $this;
    }

    /**
     * Get province
     *
     * @return \CatMS\AdminBundle\Entity\Province 
     */
    public function getProvince()
    {
        return $this->province;
    }

    /**
     * Set priority
     *
     * @param integer $priority
     * @return ShopAddress
     */
    public function setPriority($priority)
    {
        $this->priority = $priority;

        return $this;
    }

    /**
     * Get priority
     *
     * @return integer 
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Set type
     *
     * @param string $type
     * @return ShopAddress
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get type
     *
     * @return string 
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set stationary
     *
     * @param boolean $stationary
     * @return ShopAddress
     */
    public function setStationary($stationary)
    {
        $this->stationary = $stationary;

        return $this;
    }

    /**
     * Get stationary
     *
     * @return boolean 
     */
    public function getStationary()
    {
        return $this->stationary;
    }
    
    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    public function encodeUrlAddress()
    {
        $this->urlAddress = urlencode($this->address);
    }    
}
